---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hzzhouchenfeng.
--- DateTime: 2019/1/9 15:29
---


StrUtils = declare("StrUtils", {})

-- 字符串显示宽度：英文=1，中文=2
function StrUtils.GetStrWidth(str)
    local singleCharLen = 1

    local lenInByte = #str
    local width = 0
    for i = 1, lenInByte do
        local curByte = string.byte(str, i)

        local byteCount = 1

        if curByte >0 and curByte<=127 then
            byteCount = 1
        elseif curByte >= 192 and curByte <= 223 then
            byteCount = 2
        elseif curByte >= 224 and curByte <= 239 then
            byteCount = 3
        elseif curByte >= 240 and curByte <= 247 then
            byteCount = 4
        end

        local char = string.sub(str, i, i + byteCount - 1)
        i = i + byteCount -1

        --print(curByte, byteCount, char)

        if byteCount == 1 then
            -- printable
            if curByte >= 32 and curByte <= 126 then
                width = width + singleCharLen
            end
        else
            width = width + singleCharLen * 2
        end
    end

    return width
end

function StrUtils.Trim(s)
    return s:gsub("^%s*(.-)%s*$", "%1")
end

function StrUtils.TrimAll(s)
    return (s:gsub("%s*(.-)%s*", "%1"))
end

-- 获取utf8编码字符串长度，中文长度为1
-- 英文，数字，汉字都算一个单位长度
function StrUtils.UTFStrLen(str)
    local len = #str;
    local left = len;
    local cnt = 0;
    local arr={0,0xc0,0xe0,0xf0,0xf8,0xfc};
    while left ~= 0 do
        local tmp=string.byte(str,-left)
        local i=#arr
        while arr[i] do
            if tmp>=arr[i] then
                left=left-i
                break
            end
            i=i-1
        end
        cnt=cnt+1;
    end
    return cnt;
end


--截取中英文混合字符串
--参数
--  string str  原始字符串
--  number start 起始位置，注意中文长度为1
--  number len  截取长度
--返回值
--  string 截取后的字符串
--备注
--  1)中文UTF8默认占3个字节，可能对于一些占2个或4个字节的中文处理有问题
--  2)回车\n等特殊控制字符也算一个长度
function StrUtils.SubUTF8Str(str, start, len)
    local firstResult = ""
    local strResult = ""
    local maxLen = string.len(str)
    start = start - 1
    --找到起始位置
    local preSite = 1
    if start > 0 then
        for i = 1, maxLen do
            -- 第i个字符的内部数字编码
            local s_dropping = string.byte(str, i)
            -- 如果是非法或空字符，比如取到没字符的位置，直接跳出，从此位后算起始
            if not s_dropping then
                local s_str = string.sub(str, preSite, i - 1)
                preSite = i + 1
                break
            end
    
            -- 如果第i字符不是中文或是距离前面记录的位置差3个字符（一个中文字)
            -- preSite保证了在到了完整的中文字时才计算长度
            if s_dropping < 128 or (i + 1 - preSite) == 3 then
                local s_str = string.sub(str, preSite, i)
                preSite = i + 1
                firstResult = firstResult..s_str
                -- 计算当前真实字符串长度，如果已达到起始长度位置，则退出
                -- local curLen = StrUtils.UTFStrLen(firstResult)
                -- 使用和聊天相同的计算字数方式
                local curLen = StrUtils.GetStrWidth(firstResult)/2
                if (curLen == start) then 
                    break
                end
            end
        end 
    end
        
        
    --截取字符串
    preSite = string.len(firstResult) + 1
    local startC = preSite
    for i = startC, maxLen do
        local s_dropping = string.byte(str, i)
        if not s_dropping then
            local s_str = string.sub(str, preSite, i - 1)
            preSite = i
            strResult = strResult..s_str
            return strResult
        end


        if s_dropping < 128 or (i + 1 - preSite) == 3 then
            local s_str = string.sub(str, preSite, i)
            preSite = i + 1
            strResult = strResult..s_str
            --local curLen = StrUtils.UTFStrLen(strResult)
            -- 使用和聊天相同的计算字数方式
            local curLen = StrUtils.GetStrWidth(strResult)/2
            if (curLen == len) then
                return strResult
            end 
        end
    end
        
    return strResult
end